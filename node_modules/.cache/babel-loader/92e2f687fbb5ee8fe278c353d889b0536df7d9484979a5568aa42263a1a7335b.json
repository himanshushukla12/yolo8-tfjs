{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Conv2DPackedProgram {\n  constructor(convInfo) {\n    let addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = \"\\n       int xR; int xC; int xCOffset;\\n       vec4 wTexel; vec4 previous; vec4 final;\";\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += \"\\n           vec4 xTexelC\".concat(c * 2, \";\\n           int xTexelC\").concat(c * 2, \"Ready;\\n           vec4 xTexelC\").concat(c * 2 + 1, \";\\n           int xTexelC\").concat(c * 2 + 1, \"Ready;\\n           vec4 xC\").concat(c, \";\");\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += \"\\n     for (int r = 0; r < \".concat(filterHeight, \"; r++) {\\n      for (int d1 = 0; d1 < \").concat(convInfo.inChannels, \"; d1 += 2) {\\n       \");\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += \"\\n           xTexelC\".concat(c * 2, \" = vec4(0.0);\\n           xTexelC\").concat(c * 2, \"Ready = 0;\\n           xTexelC\").concat(c * 2 + 1, \" = vec4(0.0);\\n           xTexelC\").concat(c * 2 + 1, \"Ready = 0;\\n           xC\").concat(c, \" = vec4(0.0);\");\n    }\n    mainLoop += \"\\n         xR = xRCorner + r * dilations[0];\\n         if (xR >=0 && xR < inDims[0]) {\\n       \";\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n      mainLoop += \"\\n           xC = xCCorner + \".concat(colIndex * dilationWidth, \";\\n           \");\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += \"\\n                 xCOffset = xC + 1;\\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                   xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n\\n                   // Need to manually clear unused channels in case\\n                   // we're reading from recycled texture.\\n                   if (xCOffset + 1 >= inDims[1]) {\\n                     xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                   }\\n                   xTexelC\").concat(colIndex, \"Ready = 1;\\n                 }\\n               \");\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += \"\\n                 xC\".concat(colIndex, \" = vec4(xTexelC\").concat(colIndex - 2, \".zw, xTexelC\").concat(colIndex, \".xy);\\n                 \");\n            } else {\n              mainLoop += \"\\n                   xCOffset = xC + 1 - 2;\\n\\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                     previous = getX(batch, xR, xCOffset, d1);\\n\\n                     // Need to manually clear unused channels in case\\n                     // we're reading from recycled texture.\\n                     if (xCOffset + 1 >= inDims[1]) {\\n                       previous.zw = vec2(0.0);\\n                     }\\n\\n                     xC\".concat(colIndex, \" = vec4(previous.zw, xTexelC\").concat(colIndex, \".xy);\\n                   } else {\\n                     xC\").concat(colIndex, \" = vec4(0.0, 0.0, xTexelC\").concat(colIndex, \".xy);\\n                   }\\n                   \");\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += \"\\n                 if (xC >= 0 && xC < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                   xTexelC\").concat(colIndex, \" = getX(batch, xR, xC, d1);\\n                   if (xC + 1 >= inDims[1]) {\\n                     xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                   }\\n                   xTexelC\").concat(colIndex, \"Ready = 1;\\n                 }\\n\\n                 xC\").concat(colIndex, \" = xTexelC\").concat(colIndex, \";\\n                 \");\n          }\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += \"\\n                   xCOffset = xC + imod(pads[1], 2) + \".concat(nextTexelOffset, \";\\n\\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                     xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n\\n                     // Need to manually clear unused channels in case\\n                     // we're reading from recycled texture.\\n                     if (xCOffset + 1 >= inDims[1]) {\\n                       xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                     }\\n                     xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                   }\\n                   \");\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += \"\\n                     xCOffset -= 2;\\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                      previous = getX(batch, xR, xCOffset, d1);\\n                      xC\".concat(colIndex + 1, \" = vec4(previous.zw, xTexelC\").concat(colIndex + 1, \".xy);\\n                     } else {\\n                      xC\").concat(colIndex + 1, \" = vec4(0.0, 0.0, xTexelC\").concat(colIndex + 1, \".xy);\\n                     }\\n                     \");\n              } else {\n                mainLoop += \"\\n                     xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".xy);\\n                     \");\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += \"\\n                     xC\".concat(colIndex + 1, \" = xTexelC\").concat(colIndex, \";\\n                     \");\n              } else {\n                mainLoop += \"\\n                     xCOffset = xC + \".concat(nextTexelOffset, \";\\n\\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                       xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n                       if (xCOffset + 1 >= inDims[1]) {\\n                         xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                       }\\n                       xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                     }\\n\\n                     xC\").concat(colIndex + 1, \" = xTexelC\").concat(colIndex + 1, \";\\n                     \");\n              }\n            }\n          }\n        }\n      } else {\n        // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += \"\\n                 xCOffset = xC + 1 - strides[1];\\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                   xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n                   // Need to manually clear unused channels in case\\n                   // we're reading from recycled texture.\\n                   if (xCOffset + 1 >= inDims[1]) {\\n                     xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                   }\\n                   xTexelC\").concat(colIndex, \"Ready = 1;\\n                 }\\n\\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                   xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xC + 1, d1);\\n                   // Need to manually clear unused channels in case\\n                   // we're reading from recycled texture.\\n                   if (xC + 2 >= inDims[1]) {\\n                     xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                   }\\n                   xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                 }\\n\\n                 xC\").concat(colIndex, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".zw);\\n               \");\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += \"\\n                   final = vec4(0.0);\\n                   xCOffset = xC + 1 + strides[1];\\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\\n                     final = getX(batch, xR, xCOffset, d1);\\n                   }\\n                   xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex + 1, \".xy, final.xy);\\n                 \");\n            }\n          } else {\n            mainLoop += \"\\n                 if(xC >= 0 && xC < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                   xTexelC\").concat(colIndex, \" = getX(batch, xR, xC, d1);\\n                   if (xC + 1 >= inDims[1]) {\\n                     xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                   }\\n                   xTexelC\").concat(colIndex, \"Ready = 1;\\n                 }\\n\\n                 xCOffset = xC + strides[1];\\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                   xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n                   if (xCOffset + 1 >= inDims[1]) {\\n                     xTexelC\").concat(colIndex + 1, \".zw = vec2(0.);\\n                   }\\n                   xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                 }\\n\\n                 xC\").concat(colIndex, \" = vec4(\\n                   xTexelC\").concat(colIndex, \".xy, xTexelC\").concat(colIndex + 1, \".xy);\\n               \");\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += \"\\n                   xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".zw);\\n                 \");\n            }\n          }\n        }\n      }\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += \"\\n             wTexel = getW(r, \".concat(colIndex, \", d1, d2);\\n             dotProd += xC\").concat(colIndex, \".xxzz * vec4(wTexel.xy, wTexel.xy);\\n             if(d1 + 1 < \").concat(convInfo.inChannels, \") {\\n               dotProd += xC\").concat(colIndex, \".yyww * vec4(wTexel.zw, wTexel.zw);\\n             }\\n           \");\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += \"\\n               wTexel = getW(r, \".concat(colIndex + 1, \", d1, d2);\\n               dotProd += xC\").concat(colIndex + 1, \".xxzz * vec4(wTexel.xy, wTexel.xy);\\n               if(d1 + 1 < \").concat(convInfo.inChannels, \") {\\n                 dotProd += xC\").concat(colIndex + 1, \".yyww * vec4(wTexel.zw, wTexel.zw);\\n               }\\n             \");\n        }\n      }\n    }\n    mainLoop += \"\\n     }\\n   \";\n    mainLoop += \"\\n     }\\n   \";\n    mainLoop += \"\\n     }\\n   \";\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = \"vec4 activation(vec4 a) {\\n           vec4 b = getPreluActivationWeightsAtOutCoords();\\n           \".concat(activation, \"\\n         }\");\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = \"vec4 activation(vec4 a) {\\n           vec4 b = getLeakyreluAlphaAtOutCoords();\\n           \".concat(activation, \"\\n         }\");\n      } else {\n        activationSnippet = \"vec4 activation(vec4 x) {\\n           \".concat(activation, \"\\n         }\");\n      }\n      applyActivationSnippet = \"result = activation(result);\";\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = \"\\n       \".concat(activationSnippet, \"\\n\\n       void main() {\\n         ivec4 coords = getOutputCoords();\\n         int batch = coords.x;\\n         ivec2 xRCCorner = coords.yz * strides - pads;\\n         int d2 = coords.w;\\n         int xRCorner = xRCCorner.x;\\n         int xCCorner = xRCCorner.y;\\n\\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\\n         vec4 dotProd = vec4(0.000000000000001);\\n\\n         \").concat(mainLoop, \"\\n\\n         vec4 result = dotProd - vec4(0.000000000000001);\\n         \").concat(addBiasSnippet, \"\\n         \").concat(applyActivationSnippet, \"\\n         setOutput(result);\\n       }\\n     \");\n  }\n}","map":{"version":3,"names":["util","useShapeUniforms","Conv2DPackedProgram","constructor","convInfo","addBias","arguments","length","undefined","activation","hasPreluActivation","hasLeakyReluAlpha","variableNames","packedInputs","packedOutput","customUniforms","name","type","outputShape","outShape","enableShapeUniforms","padLeft","padInfo","left","strideWidth","dilationWidth","filterHeight","filterWidth","texelsAcross","mainLoop","c","concat","inChannels","texelC","colIndex","nextTexelOffset","nearestLargerEven","activationSnippet","applyActivationSnippet","addBiasSnippet","push","userCode"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-webgl\\src\\conv_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}