{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n  const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(\"Equation must contain exactly one arrow (\\\"\".concat(ARROW, \"\\\").\"));\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(inputString.indexOf(ELLIPSIS) === -1, () => \"The ellipsis notation (\\\"\".concat(ELLIPSIS, \"\\\") is not supported yet.\"));\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\"Expected \".concat(numInputs, \" input tensors, received \").concat(numTensors));\n  }\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n  const allDims = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\"Output subscripts contain the label \".concat(dimName, \" \") + \"not present in the input subscripts.\");\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n  const idDims = new Array(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\"Found duplicate axes in input component \".concat(inputTerms[i], \". \") + \"Support for duplicate axes in input is not implemented yet.\");\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n  const numDims = allDims.length; // Number of unique dimensions.\n  const numOutDims = outputString.length; // Number of output dimensions.\n  const summedDims = []; // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {\n    allDims,\n    summedDims,\n    idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims, idDims) {\n  let permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {\n    permutationIndices,\n    expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  const dimSizes = new Array(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], () => \"Expected dimension \".concat(dimSizes[idDims[i][j]], \" at axis \").concat(j, \" \") + \"of input shaped \".concat(JSON.stringify(shape), \", \") + \"but got dimension \".concat(shape[j]));\n      }\n    }\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims, idDims) {\n  const path = summedDims;\n  const steps = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {\n    path,\n    steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm) {\n  return perm.every((dim, index) => dim === index);\n}\nfunction findTermsWithDim(idDims, dim) {\n  const termIndices = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}","map":{"version":3,"names":["assert","ARROW","ARROW_REGEX","COMMA","ELLIPSIS","decodeEinsumEquation","equation","numTensors","replace","numArrows","length","Error","concat","inputString","outputString","split","indexOf","inputTerms","numInputs","allDims","i","dimName","some","inputTerm","push","idDims","Array","Set","size","j","numDims","numOutDims","summedDims","getEinsumPermutation","nDims","permutationIndices","fill","expandDims","filter","d","checkEinsumDimSizes","tensors","dimSizes","shape","undefined","JSON","stringify","getEinsumComputePath","path","steps","nSteps","computedTermIndices","summedDim","termIndices","findTermsWithDim","termIndex","isIdentityPermutation","perm","every","dim","index"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-core\\src\\backends\\einsum_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}