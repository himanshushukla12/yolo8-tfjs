{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConvPacked2DProgram {\n  constructor(convInfo) {\n    let addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = \"\\n      int xR; int xC; int xCOffset;\\n      vec4 wTexel; vec4 previous; vec4 final;\";\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += \"\\n          vec4 xTexelC\".concat(c * 2, \";\\n          int xTexelC\").concat(c * 2, \"Ready;\\n          vec4 xTexelC\").concat(c * 2 + 1, \";\\n          int xTexelC\").concat(c * 2 + 1, \"Ready;\\n          vec4 xC\").concat(c, \";\");\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += \"\\n    for (int r = 0; r < \".concat(filterHeight, \"; r++) {\\n      \");\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += \"\\n          xTexelC\".concat(c * 2, \" = vec4(0.0);\\n          xTexelC\").concat(c * 2, \"Ready = 0;\\n          xTexelC\").concat(c * 2 + 1, \" = vec4(0.0);\\n          xTexelC\").concat(c * 2 + 1, \"Ready = 0;\\n          xC\").concat(c, \" = vec4(0.0);\");\n    }\n    mainLoop += \"\\n        xR = xRCorner + r * dilations[0];\\n        if (xR >=0 && xR < inDims[0]) {\\n      \";\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n      mainLoop += \"\\n          xC = xCCorner + \".concat(colIndex * dilationWidth, \";\\n          \");\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += \"\\n                xCOffset = xC + 1;\\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n              \");\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += \"\\n                xC\".concat(colIndex, \" = vec4(xTexelC\").concat(colIndex - 2, \".zw, xTexelC\").concat(colIndex, \".xy);\\n                \");\n            } else {\n              mainLoop += \"\\n                  xCOffset = xC + 1 - 2;\\n\\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                    previous = getX(batch, xR, xCOffset, d1);\\n\\n                    // Need to manually clear unused channels in case\\n                    // we're reading from recycled texture.\\n                    if (xCOffset + 1 >= inDims[1]) {\\n                      previous.zw = vec2(0.0);\\n                    }\\n\\n                    xC\".concat(colIndex, \" = vec4(previous.zw, xTexelC\").concat(colIndex, \".xy);\\n                  } else {\\n                    xC\").concat(colIndex, \" = vec4(0.0, 0.0, xTexelC\").concat(colIndex, \".xy);\\n                  }\\n                  \");\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += \"\\n                if (xC >= 0 && xC < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xC, d1);\\n                  if (xC + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n\\n                xC\").concat(colIndex, \" = xTexelC\").concat(colIndex, \";\\n                \");\n          }\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += \"\\n                  xCOffset = xC + imod(pads[1], 2) + \".concat(nextTexelOffset, \";\\n\\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                    xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n\\n                    // Need to manually clear unused channels in case\\n                    // we're reading from recycled texture.\\n                    if (xCOffset + 1 >= inDims[1]) {\\n                      xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                    }\\n                    xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                  }\\n                  \");\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += \"\\n                    xCOffset -= 2;\\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                     previous = getX(batch, xR, xCOffset, d1);\\n                     xC\".concat(colIndex + 1, \" = vec4(previous.zw, xTexelC\").concat(colIndex + 1, \".xy);\\n                    } else {\\n                     xC\").concat(colIndex + 1, \" = vec4(0.0, 0.0, xTexelC\").concat(colIndex + 1, \".xy);\\n                    }\\n                    \");\n              } else {\n                mainLoop += \"\\n                    xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".xy);\\n                    \");\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += \"\\n                    xC\".concat(colIndex + 1, \" = xTexelC\").concat(colIndex, \";\\n                    \");\n              } else {\n                mainLoop += \"\\n                    xCOffset = xC + \".concat(nextTexelOffset, \";\\n\\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                      xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n                      if (xCOffset + 1 >= inDims[1]) {\\n                        xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                      }\\n                      xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                    }\\n\\n                    xC\").concat(colIndex + 1, \" = xTexelC\").concat(colIndex + 1, \";\\n                    \");\n              }\n            }\n          }\n        }\n      } else {\n        // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += \"\\n                xCOffset = xC + 1 - strides[1];\\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xCOffset, d1);\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xC + 1, d1);\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xC + 2 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex + 1, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                }\\n\\n                xC\").concat(colIndex, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".zw);\\n              \");\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += \"\\n                  final = vec4(0.0);\\n                  xCOffset = xC + 1 + strides[1];\\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex + 1, \".xy, final.xy);\\n                \");\n            }\n          } else {\n            mainLoop += \"\\n                if(xC >= 0 && xC < inDims[1] && xTexelC\".concat(colIndex, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex, \" = getX(batch, xR, xC, d1);\\n                  if (xC + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex, \".zw = vec2(0.0);\\n                  }\\n                  xTexelC\").concat(colIndex, \"Ready = 1;\\n                }\\n\\n                xCOffset = xC + strides[1];\\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC\").concat(colIndex + 1, \"Ready == 0) {\\n                  xTexelC\").concat(colIndex + 1, \" = getX(batch, xR, xCOffset, d1);\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC\").concat(colIndex + 1, \".zw = vec2(0.);\\n                  }\\n                  xTexelC\").concat(colIndex + 1, \"Ready = 1;\\n                }\\n\\n                xC\").concat(colIndex, \" = vec4(\\n                  xTexelC\").concat(colIndex, \".xy, xTexelC\").concat(colIndex + 1, \".xy);\\n              \");\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += \"\\n                  xC\".concat(colIndex + 1, \" = vec4(xTexelC\").concat(colIndex, \".zw, xTexelC\").concat(colIndex + 1, \".zw);\\n                \");\n            }\n          }\n        }\n      }\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += \"\\n            wTexel = getW(r, \".concat(colIndex, \", d1, q);\\n            dotProd += xC\").concat(colIndex, \" * vec4(wTexel.xz, wTexel.xz);\\n          \");\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += \"\\n              wTexel = getW(r, \".concat(colIndex + 1, \", d1, q);\\n              dotProd += xC\").concat(colIndex + 1, \" * vec4(wTexel.xz, wTexel.xz);\\n            \");\n        }\n      }\n    }\n    mainLoop += \"\\n    }\\n  \";\n    mainLoop += \"\\n      }\\n    \";\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n      } else {\n        activationSnippet = \"vec4 activation(vec4 x) {\\n          \".concat(activation, \"\\n        }\");\n      }\n      applyActivationSnippet = \"result = activation(result);\";\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \").concat(channelMul, \";\\n        int q = d2 - d1 * \").concat(channelMul, \";\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\\n        vec4 dotProd = vec4(0.000000000000001);\\n\\n        \").concat(mainLoop, \"\\n\\n        vec4 result = dotProd - vec4(0.000000000000001);\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["util","useShapeUniforms","DepthwiseConvPacked2DProgram","constructor","convInfo","addBias","arguments","length","undefined","activation","hasPreluActivation","hasLeakyReluAlpha","variableNames","packedInputs","packedOutput","customUniforms","name","type","outputShape","outShape","enableShapeUniforms","channelMul","outChannels","inChannels","padLeft","padInfo","left","strideWidth","dilationWidth","filterHeight","filterWidth","texelsAcross","mainLoop","c","concat","texelC","colIndex","nextTexelOffset","nearestLargerEven","activationSnippet","applyActivationSnippet","addBiasSnippet","push","userCode"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-webgl\\src\\conv_packed_gpu_depthwise.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}