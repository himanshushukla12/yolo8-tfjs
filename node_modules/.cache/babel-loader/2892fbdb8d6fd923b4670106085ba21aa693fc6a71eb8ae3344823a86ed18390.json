{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \".concat(x.name).concat(size > 1 ? \"[\".concat(size, \"]\") : '', \";\"));\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \".concat(x.name, \";\"));\n      prefixSnippets.push(\"uniform int offset\".concat(x.name, \";\"));\n    }\n    if (program.enableShapeUniforms) {\n      const {\n        uniformShape\n      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(\"uniform int \".concat(x.name, \"Shape;\"));\n          break;\n        case 2:\n          prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"Shape;\"));\n          break;\n        case 3:\n          prefixSnippets.push(\"uniform ivec3 \".concat(x.name, \"Shape;\"));\n          break;\n        case 4:\n          prefixSnippets.push(\"uniform ivec4 \".concat(x.name, \"Shape;\"));\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"TexShape;\"));\n    }\n  });\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(\"uniform int outShape;\");\n        break;\n      case 2:\n        prefixSnippets.push(\"uniform ivec2 outShape;\");\n        prefixSnippets.push(\"uniform int outShapeStrides;\");\n        break;\n      case 3:\n        prefixSnippets.push(\"uniform ivec3 outShape;\");\n        prefixSnippets.push(\"uniform ivec2 outShapeStrides;\");\n        break;\n      case 4:\n        prefixSnippets.push(\"uniform ivec4 outShape;\");\n        prefixSnippets.push(\"uniform ivec3 outShapeStrides;\");\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(\"uniform ivec2 outTexShape;\");\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach(d => {\n      prefixSnippets.push(\"uniform \".concat(d.type, \" \").concat(d.name).concat(d.arrayIndex ? \"[\".concat(d.arrayIndex, \"]\") : '', \";\"));\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n  let enableShapeUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\"\".concat(shape.length, \"-D input sampling\") + \" is not yet supported\");\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  let usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let enableShapeUniforms = arguments.length > 3 ? arguments[3] : undefined;\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(\"\".concat(outShape.length, \"-D output sampling is not yet supported\"));\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D, \"(textureSampler, uv).r;\\n    }\\n  \");\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \".concat(glsl.output, \" = vec4(val, 0, 0, 0);\\n    }\\n  \");\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output, \" = val;\\n    }\\n  \");\n}\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs, \" vec2 resultUV;\\n    \").concat(glsl.defineOutput, \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN, \"\\n    \").concat(glsl.defineSpecialInf, \"\\n    \").concat(glsl.defineRound, \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET, \"\\n    \").concat(SAMPLE_2D_SNIPPET, \"\\n    \").concat(SAMPLE_3D_SNIPPET, \"\\n  \");\n  return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nconst SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nconst SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nconst SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1], \".0);\\n      }\\n    \");\n  }\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0], \".0);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\\n    }\\n  \";\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y);\\n    }\\n  \");\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * float(outTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1], \".0);\\n      }\\n    \");\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * float(outTexShape[0]));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0], \".0);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\\n    }\\n  \";\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      return resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n    }\\n  \");\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return \"\\n  ivec3 getOutputCoords() {\\n    ivec2 resTexRC = ivec2(resultUV.yx *\\n                           vec2(outTexShape[0], outTexShape[1]));\\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n    \".concat(coordsFromIndexSnippet, \"\\n    return ivec3(r, c, d);\\n  }\\n\");\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatchN = texelsInBatch * outShape[1];\\n\\n      int b2 = index / texelsInBatchN;\\n      index -= b2 * texelsInBatchN;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec4(b2, b, r, c);\\n    }\\n  \";\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = \"\";\n  let coords = 'b, r, c';\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\".concat(b, \" = index / \").concat(texelsInBatchN, \";\\n      index -= b\").concat(b, \" * \").concat(texelsInBatchN, \";\\n    \") + batches;\n    coords = \"b\".concat(b, \", \") + coords;\n  }\n  return \"\\n    ivec\".concat(shape.length, \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      \").concat(batches, \"\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec\").concat(shape.length, \"(\").concat(coords, \");\\n    }\\n  \");\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      \".concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n}\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0], \",\\n                             \").concat(texShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");\n}\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      }\\n    \");\n  }\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      }\\n    \");\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      int r = index / outShape[1];\\n      int c = index - r * outShape[1];\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      int r = index / \").concat(shape[1], \";\\n      int c = index - r * \").concat(shape[1], \";\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\".concat(texName);\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", halfCR);\\n    }\\n  \");\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \".concat(funcName, \"() {return \").concat(texName, \";}\");\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      vec2 uv = packedUVfrom1D(\\n        packedTexShape[0], packedTexShape[1], index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / \").concat(tNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / \").concat(tNumC, \".0, 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow, \", \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1], \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2(0.5, (index + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2((index + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC, \".0, 0.5);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(texName, \"Shape[1] + col + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  return \"\\n  float \".concat(funcName, \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1], \" + col + \").concat(offset, \";\\n    vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n    return sampleTexture(\").concat(texName, \", uv);\\n  }\\n\");\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return \"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        vec4 \").concat(funcName, \"(int b, int row, int col) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom3D(\\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR, \", \").concat(texNumC, \", \").concat(texelsInBatch, \", \").concat(valuesPerRow, \", b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return \"\\n        \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        float \").concat(funcName, \"(int row, int col, int depth) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0, \", \").concat(stride1, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int stride1 = \").concat(texName, \"Shape[2];\\n        float texR = float(row);\\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n        float \".concat(funcName, \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1, \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n          return sampleTexture(\").concat(texName, \", uv);\\n        }\\n      \");\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        float texR = dot(vec2(row, col), vec2(\").concat(texName, \"Shape[1], 1));\\n        float texC = float(depth);\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1], \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int stride0 = \").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2];\\n      int stride1 = \").concat(texName, \"Shape[2];\\n      int index = row * stride0 + col * stride1 + depth + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n    \");\n  }\n  return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n  \");\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    vec4 \".concat(funcName, \"(int b2, int b, int row, int col) {\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[3]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\\n      texelsInBatch *= \").concat(texName, \"Shape[1];\\n      index = b2 * texelsInBatch + index;\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int texR = index / packedTexShape[1];\\n      int texC = index - texR * packedTexShape[1];\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = \"int b, int row, int col\";\n  let index = \"b * \".concat(texelsInBatch, \" + (row / 2) * \").concat(valuesPerRow, \" + (col / 2)\");\n  for (let b = 2; b < rank - 1; b++) {\n    params = \"int b\".concat(b, \", \") + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\".concat(b, \" * \").concat(texelsInBatch, \" + \") + index;\n  }\n  return \"\\n    vec4 \".concat(funcName, \"(\").concat(params, \") {\\n      int index = \").concat(index, \";\\n      int texR = index / \").concat(texNumC, \";\\n      int texC = index - texR * \").concat(texNumC, \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \", \").concat(texNumR, \");\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = \"int stride2 = \".concat(texName, \"Shape[3];\");\n  const stride1Str = \"int stride1 = \".concat(texName, \"Shape[2] * stride2;\");\n  const stride0Str = \"int stride0 = \".concat(texName, \"Shape[1] * stride1;\");\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        \").concat(stride2Str, \"\\n        \").concat(stride1Str, \"\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(stride1, stride2, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1, \", \").concat(stride2, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2], \").concat(texName, \"Shape[2], 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1] * shape[2], \", \").concat(shape[2], \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      \").concat(stride2Str, \"\\n      \").concat(stride1Str, \"\\n      \").concat(stride0Str, \"\\n      int index = row * stride0 + col * stride1 +\\n          depth * stride2 + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" +\\n          depth * \").concat(stride2, \" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3], \",\\n               \").concat(shape[2] * shape[3], \", \").concat(shape[3], \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", \").concat(stride4, \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[3] * shape[4], \",\\n               \").concat(shape[4], \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 * \").concat(stride4, \" + depth4 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return \"return \".concat(texName, \";\");\n  }\n  return \"\\n    for (int i = 0; i < \".concat(inSize, \"; i++) {\\n      if (i == index) {\\n        return \").concat(texName, \"[i];\\n      }\\n    }\\n  \");\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => \"coords.\".concat(fields[d + rankDiff], \" = 0;\")).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => \"coords.\".concat(fields[i + rankDiff])).join(', ');\n  }\n  let output = \"return outputValue;\";\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      vec4 outputValue = get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n      \").concat(output, \"\\n    }\\n  \");\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", resultUV);\\n      }\\n    \");\n  }\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => \"coords.\".concat(fields[d + rankDiff], \" = 0;\")).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => \"coords.\".concat(fields[i + rankDiff])).join(', ');\n  }\n  return \"\\n    float \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      return get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n    }\\n  \");\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape,\n    uniformShape,\n    keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","program","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","concat","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","length","customUniforms","d","type","arrayIndex","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","userCode","getSamplerFromInInfo","inInfo","arguments","undefined","shape","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","offset","tNumR","tNumC","getUniformSampler","valuesPerRow","newShape","keptDims","squeezeShape","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-webgl\\src\\shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}