{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpuResource) {\n    super();\n    // Maps data ids that have a pending read operation, to list of subscribers.\n    this.pendingRead = new WeakMap();\n    // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n    this.pendingDisposal = new WeakSet();\n    // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0;\n    // Accumulated time spent (including blocking) in uploading data to webgl.\n    this.uploadWaitMs = 0;\n    // Accumulated time spent (including blocking in downloading data from webgl.\n    this.downloadWaitMs = 0;\n    // record the last manual GL Flush time.\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(texture, shape, dtype, texHeight, texWidth, channels) {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n    // Bind texture to the input tensor.\n    inData.texture = {\n      texture,\n      texShape: [texHeight, texWidth]\n    };\n    inData.texShape = [texHeight, texWidth];\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program = new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output = this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n    return output.dataId;\n  }\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n    }\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let result;\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and \" + \"WEBGL_VERSION=2 not yet supported.\");\n      }\n    }\n    let buffer = null;\n    let tmpDownloadTarget;\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n    this.pendingRead.set(dataId, []);\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n    // Download the values from the GPU.\n    let vals;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      isPacked,\n      texture\n    } = texData;\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({\n      tensorRef\n    }, tmpData.texture);\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, data);\n  }\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\"The value \".concat(num, \" cannot be represented with your \") + \"current settings. Consider enabling float32 rendering: \" + \"'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n        }\n        throw Error(\"The value \".concat(num, \" cannot be represented on this device.\"));\n      }\n    }\n  }\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n  time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n    };\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => \"\".concat(d.name, \": \").concat(d.ms)).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    query.endMs = util.now();\n    return query;\n  }\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n    this.texData.delete(dataId);\n    return true;\n  }\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(inputs) {\n    let sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  makeOutput(shape, dtype, values) {\n    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n  }\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n  }\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');\n    }\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let customTexShape = arguments.length > 5 ? arguments[5] : undefined;\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 \" + \"dtypes, please separate the program into real and imaginary \" + \"parts.\");\n      }\n      let texData = this.texData.get(input.dataId);\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        }\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n  compileAndRun(program, inputs, outputDtype, customUniformValues) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n  getTextureManager() {\n    return this.textureManager;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n        height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n    return texData.values;\n  }\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\"High memory usage in GPU: \".concat(mb, \" MB, \") + \"most likely due to a memory leak\");\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n  async checkCompileCompletionAsync() {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p = new Promise(resolve => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n  async checkCompletionAsync_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n  checkCompletion_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  createTensorFromTexture(values, shape, dtype) {\n    const {\n      texture,\n      height,\n      width,\n      channels\n    } = values;\n    const backend = engine().backend;\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\"The texture is invalid. Also, please make sure the texture and \" + \"the TFJS WebGL backend are using the same canvas. If you want to \" + \"use your own custom canvas, you have to create and use the custom \" + \"TFJS WebGL backend created from the canvas through \" + \"'new tf.MathBackendWebGL(customCanvas)'.\");\n    }\n    const dataId = backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(\"Unknown dtype \".concat(dtype));\n  }\n}","map":{"version":3,"names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","nextFrame","scalar","tidy","util","getWebGLContext","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","EncodeMatrixPackedProgram","GPGPUContext","gpgpu_math","getUniformLocations","simpleAbsImplCPU","PackProgram","ReshapePackedProgram","tex_util","TextureUsage","TextureManager","unary_op","UnaryOpProgram","UnaryOpPackedProgram","UnpackProgram","webgl_util","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","constructor","gpuResource","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","pendingDeletes","disposed","getBool","Error","newGPGPU","gl","binaryCache","gpgpuCreatedLocally","gpgpu","canvas","textureManager","texData","nextDataId","numDataIds","writeTexture","texture","shape","dtype","texHeight","texWidth","channels","input","makeTensorInfo","inData","get","dataId","isPacked","texShape","shapeAs3D","getShapeAs3D","program","output","runWebGLProgram","disposeIntermediateTensorInfo","write","values","checkNumericalProblems","id","set","usage","UPLOAD","refCount","has","tensorData","incRef","decRef","move","tensorInfo","disposeData","readSync","complexTensorInfos","slice","CLONE","res","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","now","result","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","read","subscribers","Promise","resolve","push","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","getDenseTexShape","createAndWaitForFence","vals","ps","all","size","sizeFromShape","downloadFloat32MatrixFromBuffer","callAndCheck","deleteBuffer","dTypeVals","delete","forEach","removeDataId","readToGPU","options","arguments","length","undefined","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","Object","assign","bufferSync","t","strings","map","d","decodeString","_a","i","num","canBeRepresented","concat","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","outputShape","downloadByteEncodedFloatMatrixFromOutputTexture","timerAvailable","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","name","kernelMs","wallMs","sum","ms","join","error","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","inputs","sizeThreshold","every","getGPGPUContext","where","condition","warn","condVals","dataSync","packedUnaryOp","x","op","outInfo","compileAndRun","abs","outValues","makeOutput","ABS","isString","encodedValues","encodeString","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","getBatchDim","getRowsCols","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","customValues","texSize","assert","out","outputDtype","customUniformValues","outData","packedOutput","outPackingScheme","PackingScheme","DENSE","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","isUniform","uniformValues","isReshapeFree","savedInput","targetShape","outputData","makeShaderKey","binary","getAndSaveBinary","compileProgram","runProgram","info","glFlushThreshold","flush","unpacked","getBinary","getTextureManager","dispose","allKeys","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","getTextureShapeFromLogicalShape","isByteArray","Uint8Array","Uint8ClampedArray","getPackedMatrixTextureShapeWidthHeight","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","mb","toFixed","console","bytesPerElement","checkCompileCompletion","entries","checkCompletion_","checkCompileCompletionAsync","parallelCompilationExtension","checkCompletionAsync_","p","getProgramParameter","COMPLETION_STATUS_KHR","LINK_STATUS","log","getProgramInfoLog","getShaderParameter","fragmentShader","COMPILE_STATUS","logShaderSourceAndInfoLog","source","getShaderInfoLog","uniformLocations","customUniformLocations","infLoc","nanLoc","inShapesLocations","inTexShapesLocations","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","createTensorFromTexture","backend","isTexture","makeTensorFromDataId","a","Int32Array","Math","round"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-webgl\\src\\backend_webgl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromTexture(values: WebGLData, shape: number[],\n      dtype: DataType): Tensor {\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}