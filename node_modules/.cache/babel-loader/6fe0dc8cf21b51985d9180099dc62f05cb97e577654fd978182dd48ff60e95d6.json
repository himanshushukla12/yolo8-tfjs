{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseFillEmptyRows } from '@tensorflow/tfjs-core';\nimport { sparseFillEmptyRowsImpl } from './SparseFillEmptyRows_impl';\nexport function sparseFillEmptyRows(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    indices,\n    values,\n    denseShape,\n    defaultValue\n  } = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(\"Dense shape must be a vector, saw:\\n        \".concat(denseShape.shape));\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(\"Indices must be a matrix, saw:\\n        \".concat(indices.shape));\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(\"Values must be a vector, saw:\\n        \".concat(values.shape));\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(\"Default value must be a scalar, saw:\\n        \".concat(defaultValue.shape));\n  }\n  const $indices = backend.data.get(indices.dataId).values;\n  const $values = backend.data.get(values.dataId).values;\n  const $denseShape = backend.data.get(denseShape.dataId).values;\n  const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImpl($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n  return [backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices), backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues), backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map(value => Number(value)))), backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))];\n}\nexport const sparseFillEmptyRowsConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows\n};","map":{"version":3,"names":["SparseFillEmptyRows","sparseFillEmptyRowsImpl","sparseFillEmptyRows","args","inputs","backend","indices","values","denseShape","defaultValue","shape","length","Error","concat","$indices","data","get","dataId","$values","$denseShape","$defaultValue","outputIndices","outputIndicesShape","outputValues","emptyRowIndicator","reverseIndexMap","dtype","makeTensorInfo","Uint8Array","map","value","Number","Int32Array","sparseFillEmptyRowsConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-cpu\\src\\kernels\\SparseFillEmptyRows.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,mBAAmB,QAA0D,uBAAuB;AAItI,SAAQC,uBAAuB,QAAO,4BAA4B;AAElE,OAAM,SAAUC,mBAAmBA,CAACC,IAGnC;EACC,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG,OAAO;IAAEC,MAAM;IAAEC,UAAU;IAAEC;EAAY,CAAC,GAAGL,MAAM;EAC1D,IAAII,UAAU,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,gDAAAC,MAAA,CACTL,UAAU,CAACE,KAAK,CAAE,CAAC;;EAE3B,IAAIJ,OAAO,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,4CAAAC,MAAA,CACTP,OAAO,CAACI,KAAK,CAAE,CAAC;;EAExB,IAAIH,MAAM,CAACG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC7B,MAAM,IAAIC,KAAK,2CAAAC,MAAA,CACTN,MAAM,CAACG,KAAK,CAAE,CAAC;;EAEvB,IAAID,YAAY,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACnC,MAAM,IAAIC,KAAK,kDAAAC,MAAA,CACTJ,YAAY,CAACC,KAAK,CAAE,CAAC;;EAG7B,MAAMI,QAAQ,GAAGT,OAAO,CAACU,IAAI,CAACC,GAAG,CAACV,OAAO,CAACW,MAAM,CAAC,CAACV,MAAoB;EACtE,MAAMW,OAAO,GAAGb,OAAO,CAACU,IAAI,CAACC,GAAG,CAACT,MAAM,CAACU,MAAM,CAAC,CAACV,MAAoB;EACpE,MAAMY,WAAW,GAAGd,OAAO,CAACU,IAAI,CAACC,GAAG,CAACR,UAAU,CAACS,MAAM,CAAC,CAACV,MAAoB;EAC5E,MAAMa,aAAa,GACff,OAAO,CAACU,IAAI,CAACC,GAAG,CAACP,YAAY,CAACQ,MAAM,CAAC,CAACV,MAAM,CAAC,CAAC,CAAW;EAE7D,MAAM,CAACc,aAAa,EAAEC,kBAAkB,EAAEC,YAAY,EAC/CC,iBAAiB,EAAEC,eAAe,CAAC,GACtCxB,uBAAuB,CACnBa,QAAQ,EAAER,OAAO,CAACI,KAAK,EAAEJ,OAAO,CAACoB,KAAK,EAAER,OAAO,EAAEX,MAAM,CAACmB,KAAK,EAC7DP,WAAW,EAAEC,aAAa,CAAC;EACnC,OAAO,CACLf,OAAO,CAACsB,cAAc,CAACL,kBAAkB,EAAEhB,OAAO,CAACoB,KAAK,EAAEL,aAAa,CAAC,EACxEhB,OAAO,CAACsB,cAAc,CAClB,CAACL,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAEf,MAAM,CAACmB,KAAK,EAAEH,YAAY,CAAC,EACxDlB,OAAO,CAACsB,cAAc,CAClB,CAACH,iBAAiB,CAACb,MAAM,CAAC,EAAE,MAAM,EAClC,IAAIiB,UAAU,CACVJ,iBAAiB,CAACK,GAAG,CAAEC,KAAc,IAAKC,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,EAClEzB,OAAO,CAACsB,cAAc,CAClB,CAACF,eAAe,CAACd,MAAM,CAAC,EAAEL,OAAO,CAACoB,KAAK,EACvC,IAAIM,UAAU,CAACP,eAAe,CAAC,CAAC,CACrC;AACH;AAEA,OAAO,MAAMQ,yBAAyB,GAAiB;EACrDC,UAAU,EAAElC,mBAAmB;EAC/BmC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAElC;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}