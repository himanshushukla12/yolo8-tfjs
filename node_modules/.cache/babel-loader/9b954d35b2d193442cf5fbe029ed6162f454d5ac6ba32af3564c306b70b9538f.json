{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    if (this.rank === 0) {\n      this.userCode = \"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n      this.userCode = \"\\n        void main() {\\n          \".concat(dtype, \" rc = getOutputCoords();\\n\\n          if(\").concat(outOfBoundsCondition, \") {\\n            setOutput(vec4(0));\\n          } else {\\n            \").concat(setup, \"\\n\\n            setOutput(vec4(\").concat(output, \"));\\n          }\\n        }\\n      \");\n    }\n  }\n  getSourceCoordsArr(dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = \"\".concat(row === 0 ? 'r' : 'rp1', \", \").concat(col === 0 ? 'c' : 'cp1');\n        for (let d = 2; d < this.rank; d++) {\n          coord = \"\".concat(dims[dims.length - 1 - d], \",\") + coord;\n        }\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n  getOutOfBoundsCondition(dims) {\n    if (this.rank === 1) {\n      return \"rc > \".concat(this.enableShapeUniforms ? 'outShape' : this.outputShape[0]);\n    }\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += \"\".concat(dims[i], \" >= \").concat(this.enableShapeUniforms ? \"outShape[\".concat(i, \"]\") : this.outputShape[i]);\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n    return cond;\n  }\n  getSetup(dims) {\n    if (this.rank === 1) {\n      return '';\n    }\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? \"outShape[\".concat(this.rank, \" - 1]\") : this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? \"outShape[\".concat(this.rank, \" - 2]\") : this.outputShape[this.rank - 2];\n    return \"\\n      int r = \".concat(innerDims[0], \";\\n      int c = \").concat(innerDims[1], \";\\n      int rp1 = r + 1;\\n      int cp1 = c + 1;\\n\\n      bool cEdge = cp1 >= \").concat(col, \";\\n      bool rEdge = rp1 >= \").concat(row, \";\\n    \");\n  }\n  getOutput(dims) {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return \"getA(rc), (rc + 1 >= \".concat(outShape, \" ? 0. : getA(rc + 1)), 0, 0\");\n    }\n    return \"getA(\".concat(sourceCoords[0], \"),\\n            cEdge ? 0. : getA(\").concat(sourceCoords[1], \"),\\n            rEdge ? 0. : getA(\").concat(sourceCoords[2], \"),\\n            rEdge || cEdge ? 0. : getA(\").concat(sourceCoords[3], \")\");\n  }\n}","map":{"version":3,"names":["useShapeUniforms","getChannels","getCoordsDataType","PackProgram","constructor","outputShape","variableNames","packedInputs","packedOutput","rank","length","enableShapeUniforms","userCode","channels","dtype","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","output","getOutput","concat","getSourceCoordsArr","dims","coords","row","col","coord","d","push","cond","i","innerDims","slice","sourceCoords","outShape"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-webgl\\src\\pack_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,gBAAgB,QAAO,cAAc;AAC3D,SAAQC,WAAW,QAAO,gBAAgB;AAC1C,SAAQC,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAOC,WAAW;EAStBC,YACIC,WACY;IAVhB,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAGrB,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,YAAY,GAAG,IAAI;IAOE;IACnB,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,IAAI,GAAGJ,WAAW,CAACK,MAAM;IAC9B,IAAI,CAACC,mBAAmB,GAAGX,gBAAgB,CAAC,IAAI,CAACK,WAAW,CAACK,MAAM,CAAC;IAEpE,IAAI,IAAI,CAACD,IAAI,KAAK,CAAC,EAAE;MACnB,IAAI,CAACG,QAAQ,+FAIZ;KACF,MAAM;MACL,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,IAAI,EAAE,IAAI,CAACQ,IAAI,CAAC;MAC7C,MAAMK,KAAK,GAAGZ,iBAAiB,CAAC,IAAI,CAACO,IAAI,CAAC;MAC1C,MAAMM,oBAAoB,GAAG,IAAI,CAACC,uBAAuB,CAACH,QAAQ,CAAC;MACnE,MAAMI,KAAK,GAAG,IAAI,CAACC,QAAQ,CAACL,QAAQ,CAAC;MACrC,MAAMM,MAAM,GAAG,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC;MAEvC,IAAI,CAACD,QAAQ,yCAAAS,MAAA,CAEPP,KAAK,+CAAAO,MAAA,CAEFN,oBAAoB,4EAAAM,MAAA,CAGrBJ,KAAK,qCAAAI,MAAA,CAEUF,MAAM,wCAG5B;;EAEL;EAEQG,kBAAkBA,CAACC,IAAc;IACvC,MAAMC,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACjC,IAAIC,KAAK,MAAAN,MAAA,CAAMI,GAAG,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,QAAAJ,MAAA,CAAKK,GAAG,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,CAAE;QAEpE,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,IAAI,EAAEmB,CAAC,EAAE,EAAE;UAClCD,KAAK,GAAG,GAAAN,MAAA,CAAGE,IAAI,CAACA,IAAI,CAACb,MAAM,GAAG,CAAC,GAAGkB,CAAC,CAAC,SAAMD,KAAK;;QAGjDH,MAAM,CAACK,IAAI,CAACF,KAAK,CAAC;;;IAGtB,OAAOH,MAAM;EACf;EAEQR,uBAAuBA,CAACO,IAAc;IAC5C,IAAI,IAAI,CAACd,IAAI,KAAK,CAAC,EAAE;MACnB,eAAAY,MAAA,CACI,IAAI,CAACV,mBAAmB,GAAG,UAAU,GAAG,IAAI,CAACN,WAAW,CAAC,CAAC,CAAC;;IAGjE,IAAIyB,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACtB,IAAI,GAAG,CAAC,EAAEsB,CAAC,GAAG,IAAI,CAACtB,IAAI,EAAEsB,CAAC,EAAE,EAAE;MAC9CD,IAAI,OAAAT,MAAA,CAAOE,IAAI,CAACQ,CAAC,CAAC,UAAAV,MAAA,CACd,IAAI,CAACV,mBAAmB,eAAAU,MAAA,CAAeU,CAAC,SAAM,IAAI,CAAC1B,WAAW,CAAC0B,CAAC,CAAC,CAAE;MACvE,IAAIA,CAAC,GAAG,IAAI,CAACtB,IAAI,GAAG,CAAC,EAAE;QACrBqB,IAAI,IAAI,IAAI;;;IAIhB,OAAOA,IAAI;EACb;EAEQZ,QAAQA,CAACK,IAAc;IAC7B,IAAI,IAAI,CAACd,IAAI,KAAK,CAAC,EAAE;MACnB,OAAO,EAAE;;IAGX,MAAMuB,SAAS,GAAGT,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC,MAAMP,GAAG,GAAG,IAAI,CAACf,mBAAmB,eAAAU,MAAA,CAAe,IAAI,CAACZ,IAAI,aACrB,IAAI,CAACJ,WAAW,CAAC,IAAI,CAACI,IAAI,GAAG,CAAC,CAAC;IACtE,MAAMgB,GAAG,GAAG,IAAI,CAACd,mBAAmB,eAAAU,MAAA,CAAe,IAAI,CAACZ,IAAI,aACrB,IAAI,CAACJ,WAAW,CAAC,IAAI,CAACI,IAAI,GAAG,CAAC,CAAC;IAEtE,0BAAAY,MAAA,CACYW,SAAS,CAAC,CAAC,CAAC,uBAAAX,MAAA,CACZW,SAAS,CAAC,CAAC,CAAC,qFAAAX,MAAA,CAIAK,GAAG,mCAAAL,MAAA,CACHI,GAAG;EAE7B;EAEQL,SAASA,CAACG,IAAc;IAC9B,MAAMW,YAAY,GAAG,IAAI,CAACZ,kBAAkB,CAACC,IAAI,CAAC;IAClD,IAAI,IAAI,CAACd,IAAI,KAAK,CAAC,EAAE;MACnB,MAAM0B,QAAQ,GACV,IAAI,CAACxB,mBAAmB,GAAG,UAAU,GAAG,IAAI,CAACN,WAAW,CAAC,CAAC,CAAC;MAC/D,+BAAAgB,MAAA,CAA+Bc,QAAQ;;IAGzC,eAAAd,MAAA,CAAea,YAAY,CAAC,CAAC,CAAC,wCAAAb,MAAA,CACFa,YAAY,CAAC,CAAC,CAAC,wCAAAb,MAAA,CACfa,YAAY,CAAC,CAAC,CAAC,iDAAAb,MAAA,CACNa,YAAY,CAAC,CAAC,CAAC;EACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}