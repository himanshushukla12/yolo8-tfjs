{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Generates sparse segment reduction negative segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n  return \"segment ids must be >= 0\";\n}\n/**\n * Generates sparse segment reduction non increasing segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n  return \"segment ids are not increasing\";\n}\n/**\n * Generates sparse segment reduction segment id out of range error message.\n *\n * @param segmentId The segment id index that is out of range.\n * @param outputRows Upper bound of valid segment id values.\n */\nexport function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(segmentId, outputRows) {\n  return \"Segment id \".concat(segmentId, \" out of range [0, \").concat(outputRows, \"), possibly because segmentIds input is not sorted.\");\n}\n/**\n * Generates sparse segment reduction input indice out of range error message.\n *\n * @param index The index that holds the out of range value.\n * @param indexValue The value that is out of range.\n * @param inputRows Upper bound of valid index values.\n */\nexport function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(index, indexValue, inputRows) {\n  return \"Bad: indices[\".concat(index, \"] == \").concat(indexValue, \" out of range [0, \").concat(inputRows, \")\");\n}","map":{"version":3,"names":["getSparseSegmentReductionNegativeSegmentIdsErrorMessage","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","segmentId","outputRows","concat","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","index","indexValue","inputRows"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-core\\src\\ops\\sparse\\sparse_segment_reduction_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Generates sparse segment reduction negative segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n  return `segment ids must be >= 0`;\n}\n\n/**\n * Generates sparse segment reduction non increasing segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n  return `segment ids are not increasing`;\n}\n\n/**\n * Generates sparse segment reduction segment id out of range error message.\n *\n * @param segmentId The segment id index that is out of range.\n * @param outputRows Upper bound of valid segment id values.\n */\nexport function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n    segmentId: number, outputRows: number) {\n  return `Segment id ${segmentId} out of range [0, ${\n      outputRows}), possibly because segmentIds input is not sorted.`;\n}\n\n/**\n * Generates sparse segment reduction input indice out of range error message.\n *\n * @param index The index that holds the out of range value.\n * @param indexValue The value that is out of range.\n * @param inputRows Upper bound of valid index values.\n */\nexport function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n    index: number, indexValue: number, inputRows: number) {\n  return `Bad: indices[${index}] == ${indexValue} out of range [0, ${\n      inputRows})`;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;;;AAIA,OAAM,SAAUA,uDAAuDA,CAAA;EACrE;AACF;AAEA;;;;AAIA,OAAM,SAAUC,4DAA4DA,CAAA;EAC1E;AACF;AAEA;;;;;;AAMA,OAAM,SAAUC,wDAAwDA,CACpEC,SAAiB,EAAEC,UAAkB;EACvC,qBAAAC,MAAA,CAAqBF,SAAS,wBAAAE,MAAA,CAC1BD,UAAU;AAChB;AAEA;;;;;;;AAOA,OAAM,SAAUE,sDAAsDA,CAClEC,KAAa,EAAEC,UAAkB,EAAEC,SAAiB;EACtD,uBAAAJ,MAAA,CAAuBE,KAAK,WAAAF,MAAA,CAAQG,UAAU,wBAAAH,MAAA,CAC1CI,SAAS;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}