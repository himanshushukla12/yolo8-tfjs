{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    \").concat(glsl.attribute, \" vec3 clipSpacePos;\\n    \").concat(glsl.attribute, \" vec2 uv;\\n    \").concat(glsl.varyingVs, \" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\");\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return {\n    texture,\n    texShape: [height, width]\n  };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  const posOffset = 0; // x is the first buffer element\n  const uvOffset = 3 * 4; // uv comes after [x y z]\n  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  let dataForUpload, texelDataType, internalFormat;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if (pixels.data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n  return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n  return packedRGBA;\n}","map":{"version":3,"names":["env","getGlslDifferences","tex_util","webgl_util","createVertexShader","gl","glsl","vertexShaderSource","concat","version","attribute","varyingVs","createVertexBuffer","vertexArray","Float32Array","createStaticVertexBuffer","createIndexBuffer","triangleVertexIndices","Uint16Array","createStaticIndexBuffer","createAndConfigureTexture","width","height","internalFormat","textureFormat","textureType","validateTextureSize","texture","createTexture","tex2d","TEXTURE_2D","callAndCheck","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getNumber","texImage2D","texStorage2D","texShape","getInternalFormatForFloat32MatrixTexture","textureConfig","internalFormatFloat","createFloat32MatrixTexture","rows","columns","getUnpackedMatrixTextureShapeWidthHeight","textureFormatFloat","FLOAT","getInternalFormatForFloat16MatrixTexture","internalFormatHalfFloat","createFloat16MatrixTexture","textureTypeHalfFloat","getInternalFormatForUnsignedBytesMatrixTexture","downloadTextureFormat","createUnsignedBytesMatrixTexture","RGBA","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","internalFormatPackedFloat","createPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","internalFormatPackedHalfFloat","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","program","vertexBuffer","posOffset","uvOffset","stride","bindBuffer","ARRAY_BUFFER","success","bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","data","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","buffer","createBuffer","PIXEL_PACK_BUFFER","bytesPerFloat","valuesPerTexel","bufferSizeBytes","bufferData","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","size","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","numChannels","getUnpackedArraySizeFromMatrixSize","downloadPackedMatrixFromBuffer","batch","cols","physicalRows","physicalCols","getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA"],"sources":["E:\\office work\\hositngYOLOgithub\\tfjs-backend-webgl\\src\\gpgpu_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}